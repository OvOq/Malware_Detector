import numpy, scipy, os, array
import imageio
import matplotlib.pyplot as plt
import cv2 as cv
from tqdm import tqdm
import time

# 一些参数
# filename = 'E:/0/test1.dmp'
# graphname = 'E:/0/test1.png'
# threshold = 4 * 1048576 # 文件长度以4MB为阈值  

# 双线性插值缩放
def cubic(img, w):
    return cv.resize(img,(w, w), cv.INTER_CUBIC)


def DumpToPng(filepath):
    "遍历文件夹, 扫描.dmp文件并转为同名灰度图存到文件夹新的同级目录下"
    # print(filepath)
    # print(type(filepath))
    for root, dirs, files in os.walk(filepath):
        # print(files)
        for file in files:
            # 获取文件名和一些参数
            str(file)
            fname = file.split('.dmp')[0]                    # 注意类型转换,不加下标则是list
            filename = filepath + fname + '.dmp'
            graphname = 'E:/graphdata_common/' + fname + '.png'             # 原来格式是png

            # print(fname)
            # print(type(fname))
            print(filename)

            # 读文件信息
            f = open(filename, 'rb')       

            # 将二进制数据存为数组
            # 需要将图片处理为正方形,边长就是文件长开方
            # a = array.array("B") # uint8
            a = numpy.fromfile(f, dtype = numpy.ubyte)
            f.close()
            
            len = a.shape[0]

            if len==0:
                continue
            
            w = int(len**0.5)
            rem = len - w*w             # 剩余个数

            if rem != 0:
                a = a[:(len - rem)]
                   
            a = a.reshape(w, w)
            # a = numpy.uint8(g)

            image = cubic(a, 200)

            # 保存图片
            cv.imwrite(graphname, image)
            #imageio.imsave(graphname, image)

    return

#t1 = time.time()
# DumpToPng(filepath = 'E:/00/')
DumpToPng(filepath = 'E:/dump_common/')
#t2 = time.time()
#print('运行时间: ', t2 - t1, 's')